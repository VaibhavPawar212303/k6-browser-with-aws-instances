name: K6 Test on AWS EC2 with Ubuntu

on:
  push:
    branches:
      - main

jobs:
  k6-test:
    runs-on: ubuntu-latest

    env:
      REGION: us-east-1
      INSTANCE_TYPE: t2.micro
      TAG_NAME: k6-test-instance

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Get Latest Ubuntu AMI
        id: get_ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners 099720109477 \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*" \
            --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' \
            --output text)
          if [[ -z "$AMI_ID" || "$AMI_ID" == "None" ]]; then
            echo "Failed to fetch the latest Ubuntu AMI." >&2
            exit 1
          fi
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      - name: Create Security Group
        id: create_security_group
        run: |
          SG_NAME="k6-test-sg"
          EXISTING_SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=${SG_NAME}" \
            --query "SecurityGroups[0].GroupId" --output text 2>/dev/null)
          
          if [[ "$EXISTING_SG_ID" == "None" || -z "$EXISTING_SG_ID" ]]; then
            echo "Creating a new security group..."
            SG_ID=$(aws ec2 create-security-group \
              --group-name "$SG_NAME" \
              --description "Security group for K6 test" \
              --vpc-id $(aws ec2 describe-vpcs --query 'Vpcs[0].VpcId' --output text) \
              --query 'GroupId' --output text)
            aws ec2 authorize-security-group-ingress \
              --group-id "$SG_ID" --protocol tcp --port 22 --cidr 0.0.0.0/0
          else
            SG_ID="$EXISTING_SG_ID"
          fi
          echo "SECURITY_GROUP=${SG_ID}" >> $GITHUB_ENV

      - name: Get Default Subnet
        id: get_subnet
        run: |
          SUBNET_ID=$(aws ec2 describe-subnets \
            --filters "Name=default-for-az,Values=true" \
            --query 'Subnets[0].SubnetId' --output text)
          if [[ -z "$SUBNET_ID" || "$SUBNET_ID" == "None" ]]; then
            echo "Failed to fetch default subnet." >&2
            exit 1
          fi
          echo "SUBNET_ID=${SUBNET_ID}" >> $GITHUB_ENV

      - name: Launch EC2 Instances
        id: launch_ec2
        run: |
          INSTANCE_IDS=$(aws ec2 run-instances \
            --image-id ${{ env.AMI_ID }} \
            --count 5 \
            --instance-type ${{ env.INSTANCE_TYPE }} \
            --security-group-ids ${{ env.SECURITY_GROUP }} \
            --subnet-id ${{ env.SUBNET_ID }} \
            --key-name vaibhav \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${{ env.TAG_NAME }}}]" \
            --query 'Instances[*].InstanceId' --output text)
          if [[ -z "$INSTANCE_IDS" || "$INSTANCE_IDS" == "None" ]]; then
            echo "Failed to launch EC2 instances." >&2
            exit 1
          fi
          echo "INSTANCE_IDS=${INSTANCE_IDS}" >> $GITHUB_ENV

      - name: Wait for Instances to Complete Initialization
        run: |
          for id in ${{ env.INSTANCE_IDS }}; do
            aws ec2 wait instance-status-ok --instance-ids $id
          done

      - name: Execute Commands via SSH
        run: |
          # Save the private key to a file
          echo "$AWS_SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          for id in ${{ env.INSTANCE_IDS }}; do
            INSTANCE_IP=$(aws ec2 describe-instances \
              --instance-ids $id \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            echo "Connecting to instance: $INSTANCE_IP"

            ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP <<EOC
              sudo apt-get update -y
              sudo apt-get install -y k6 git
              git clone https://github.com/VaibhavPawar212303/k6-browser-with-aws-instances.git
              echo "K6 and repository setup completed on \$(hostname)"
  EOC
          done
        env:
          AWS_SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

      - name: Terminate EC2 Instances
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_IDS }}
          aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_IDS }}

      - name: Delete Security Group
        if: always()
        run: |
          aws ec2 delete-security-group --group-id ${{ env.SECURITY_GROUP }}
